{"version":3,"sources":["components/contacts/contacts.module.css","components/contactForm/contactForm.module.css","components/logo/logo.module.css","components/filter/filter.module.css","redux/contacts/actionOperetion.jsx","redux/contacts/actions.jsx","redux/contacts/selectors.jsx","components/contactForm/contactForm.jsx","components/contactForm/contactFormContainer.jsx","components/filter/filter.jsx","components/filter/filterContainer.jsx","components/contactItem/contactItem.jsx","components/contactItem/contactItemContainer.jsx","components/contacts/contacts.jsx","components/contacts/contactsContainer.jsx","components/logo/logo.jsx","components/APP.jsx","components/appContainer.jsx","redux/contacts/reducer.jsx","redux/store.jsx","index.js"],"names":["module","exports","exp","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","deleteContact","changeFilter","axios","defaults","baseURL","expAction","fetchContacts","dispatch","actionOperation","get","then","data","catch","error","addContact","name","number","post","id","delete","getContacts","state","contacts","arrayItems","getFilter","filter","selectors","selectContacts","createSelector","contact","toLowerCase","includes","ContactForm","isAddDisable","change","e","target","value","setState","setIsAddEnable","inputSubmit","preventDefault","props","find","alert","onSubmit","this","className","styles","form","formBlock","label","inpt","type","onChange","btn","onClick","disabled","Component","connect","actions","Filter","changeOnFilter","searchBlock","mapDispatchToProps","ContactItem","removeOnContact","item","ownProps","itemsStyles","enter","enterActive","exit","exitActive","ContactList","TransitionGroup","component","map","CSSTransition","timeout","classNames","logoStyles","appear","appearActive","Logo","in","unmountOnExit","APP","APPContainer","onFetchContacts","createReducer","_","action","payload","combineReducers","store","configureStore","reducer","reducers","middleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2502abe9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contacts_list__1oULF\",\"item\":\"contacts_item__2F9B2\",\"btn\":\"contacts_btn__3eHcz\",\"enter\":\"contacts_enter__29a4p\",\"enterActive\":\"contacts_enterActive__26Yoh\",\"exit\":\"contacts_exit__OZmG6\",\"exitActive\":\"contacts_exitActive__1ImIQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactForm_form__HsCnK\",\"formBlock\":\"contactForm_formBlock__22j3o\",\"label\":\"contactForm_label__A4GRp\",\"inpt\":\"contactForm_inpt__3ooXB\",\"btn\":\"contactForm_btn__1aPA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"logo_logo__1SPxG\",\"appear\":\"logo_appear__dYNoZ\",\"appearActive\":\"logo_appearActive__3BQ-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBlock\":\"filter_searchBlock__37n4g\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('contacts/fetchRequest');\r\nconst fetchContactSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchContactError = createAction('contacts/fetchError');\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeRequest');\r\nconst removeContactSuccess = createAction('contacts/removeSuccess');\r\nconst removeContactError = createAction('contacts/removeError');\r\n\r\nconst deleteContact = createAction('contacts/remove');\r\n\r\nconst changeFilter = createAction('contscts/changeFilter');\r\n\r\n\r\nconst exp = {\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    removeContactRequest,\r\n    removeContactSuccess,\r\n    removeContactError,\r\n    deleteContact, \r\n    changeFilter,\r\n};\r\n\r\nexport default exp;","import axios from 'axios';\r\nimport actionOperation from './actionOperetion';\r\n  \r\naxios.defaults.baseURL = 'http://localhost:5555/';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(actionOperation.fetchContactRequest());\r\n      axios.get('contacts')\r\n      .then(({ data }) => dispatch(actionOperation.fetchContactSuccess(data)))\r\n      .catch(error => dispatch(actionOperation.fetchContactError(error)));\r\n  };\r\n\r\n  const addContact = (name, number) => dispatch => {\r\n    dispatch(actionOperation.addContactRequest());\r\n    axios\r\n      .post('contacts', {\r\n        name,\r\n        number,\r\n      })\r\n      .then(({ data }) => dispatch(actionOperation.addContactSuccess(data)))\r\n      .catch(error => dispatch(actionOperation.addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(actionOperation.removeContactRequest());\r\n      axios\r\n      .delete(`contacts/${id}`)\r\n      .then(() => dispatch(actionOperation.removeContactSuccess(id)))\r\n      .catch(error => dispatch(actionOperation.removeContactError(error)));\r\n  };\r\n\r\nconst expAction = {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact\r\n};\r\n\r\nexport default expAction;\r\n\r\n\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.arrayItems;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst selectContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts && contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst selectors = {\r\n  selectContacts,\r\n  getContacts,\r\n  getFilter,\r\n};\r\n\r\nexport default selectors;","import React, {Component} from 'react';\r\nimport styles from './contactForm.module.css';\r\n\r\nexport default class ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n        isAddDisable: true\r\n    };\r\n  \r\n    change = (e) => {\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name] : value,\r\n        }, this.setIsAddEnable);\r\n    };\r\n    \r\n    setIsAddEnable = () => {\r\n        const { name, number } = this.state;\r\n        this.setState({\r\n          isAddDisable: name === '' || number === ''\r\n        });\r\n    };\r\n\r\n    inputSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('Submitted!');\r\n        const { name, number } = this.state;\r\n        const { arrayItems } = this.props.state.contacts;\r\n        if (arrayItems && arrayItems.find(contact => name === contact.name)) {\r\n            alert('Такой пользователь уже есть в Вашей телефонной книге!!!');\r\n        } else {\r\n            this.props.onSubmit(name, number);\r\n        }\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        });\r\n    };\r\n     \r\n    render() {\r\n        const { name, number, isAddDisable } = this.state;        \r\n        return (            \r\n            <form onSubmit={this.inputSubmit} className={styles.form}> \r\n                <div className={styles.formBlock}>\r\n                <label className={styles.label}>\r\n                    Name\r\n                    <input  className={styles.inpt}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}     \r\n                            onChange={this.change}                              \r\n                    />\r\n                </label>\r\n                <label className={styles.label}>\r\n                    Number\r\n                    <input  className={styles.inpt}\r\n                            type=\"text\"\r\n                            name=\"number\"\r\n                            value={number}\r\n                            onChange={this.change}\r\n                    />\r\n                </label>\r\n                </div>\r\n                <button className={styles.btn} type=\"submit\" onClick={this.change} disabled = {isAddDisable}>Add contact</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/actions';\r\nimport ContactForm from './contactForm';\r\n\r\nconst mapStateToProps = state => ({\r\n    state,\r\n  });\r\n  \r\nexport default connect(mapStateToProps, {onSubmit: actions.addContact})(ContactForm);\r\n  \r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styles from './filter.module.css';\r\n\r\nconst Filter = ({value, changeOnFilter}) => (  \r\n    <div className={styles.searchBlock}>\r\n        Find contacts by name\r\n          <input  type=\"text\" value={value} onChange = {(e) => changeOnFilter(e.target.value)}/>\r\n    </div>\r\n)\r\n\r\nFilter.propTypes = {\r\n    value: propTypes.string.isRequired,\r\n    changeOnFilter: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n\r\n","import { connect } from 'react-redux';\r\nimport actionOperation from '../../redux/contacts/actionOperetion';\r\nimport selectors from '../../redux/contacts/selectors';\r\nimport Filter from './filter';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: selectors.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeOnFilter: actionOperation.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport styles from '../contacts/contacts.module.css';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nconst ContactItem = \r\n    ({ contact: {name, number }, removeOnContact }) => {\r\n            return(\r\n            <li className={styles.item}>\r\n            {name}: {number}\r\n            {<button className={styles.btn} type=\"button\" name=\"delete\" onClick={removeOnContact}>Delete</button>}\r\n        </li>\r\n        );\r\n    };\r\n\r\nContactItem.propTypes = {\r\n    removeOnContact: propTypes.func.isRequired,\r\n    contacts: propTypes.arrayOf(propTypes.shape({\r\n        id: propTypes.string.isRequired,\r\n        name: propTypes.string.isRequired,\r\n        number: propTypes.string.isRequired,\r\n        }),\r\n    ),\r\n};\r\nexport default ContactItem;\r\n","import { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/actions';\r\nimport ContactItem from '../contactItem/contactItem';\r\n\r\nconst mapDispatchToProps  = (dispatch, ownProps) =>({\r\n    removeOnContact: () =>\r\n    dispatch(actions.deleteContact(ownProps.contact.id)),\r\n});\r\n      \r\nexport default connect(null, mapDispatchToProps)(ContactItem);\r\n\r\n","import React from 'react';\r\nimport styles from './contacts.module.css';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport ContactItem from '../contactItem/contactItemContainer';\r\nimport propTypes from 'prop-types';\r\n\r\nconst itemsStyles = {\r\n    enter: styles.enter,\r\n    enterActive: styles.enterActive,\r\n    exit: styles.exit,\r\n    exitActive: styles.exitActive,\r\n};\r\n\r\nconst ContactList = ({contacts}) => {\r\n    return(\r\n     <TransitionGroup component=\"ul\">\r\n       {contacts && contacts.map(contact => (\r\n        <CSSTransition key={contact.id} timeout={250} classNames={itemsStyles}>\r\n           <ContactItem contact={contact} />\r\n        </CSSTransition>\r\n       ))} \r\n     </TransitionGroup>\r\n    );\r\n};  \r\n\r\nContactList.propTypes = {\r\n    contacts: propTypes.arrayOf(propTypes.shape({\r\n        name: propTypes.string.isRequired,\r\n        number: propTypes.string.isRequired,\r\n    }),),\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport selectors from '../../redux/contacts/selectors';\r\nimport ContactList from '../contacts/contacts';\r\n\r\nconst mapStateToProps = state => {\r\n    if (state.contacts) {\r\n      return {\r\n        contacts: selectors.selectContacts(state),\r\n      };\r\n    }\r\n  };\r\n  \r\n  export default connect(mapStateToProps)(ContactList);","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport styles from './logo.module.css';\r\n\r\nconst logoStyles = {\r\n  appear: styles.appear,\r\n  appearActive: styles.appearActive,\r\n};\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <CSSTransition\r\n      in={true}\r\n      appear={true}\r\n      timeout={500}\r\n      classNames={logoStyles}\r\n      unmountOnExit\r\n    >\r\n      <h1>Phonebook</h1>\r\n    </CSSTransition>\r\n  );\r\n};\r\nexport default Logo;","import React from 'react';\r\nimport ContactForm from './contactForm/contactFormContainer';\r\nimport Filter from './filter/filterContainer';\r\nimport ContactList from './contacts/contactsContainer';\r\nimport Logo from './logo/logo';\r\nimport  './app/app.module.css';\r\n\r\n\r\nconst APP = () =>{\r\n    return (\r\n        <div>\r\n        <Logo />\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <Filter/>\r\n        <ContactList />\r\n        \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default APP;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../redux/contacts/actions';\r\nimport selectors from '../redux/contacts/selectors';\r\nimport APP from './APP';\r\n\r\nclass APPContainer extends Component {\r\n    componentDidMount() {\r\n        this.props.onFetchContacts();\r\n    }\r\n    render() {\r\n        return <APP {...this.props} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      contacts: selectors.getContacts(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onFetchContacts: () => dispatch(actions.fetchContacts()),\r\n});\r\n    \r\nexport default connect(mapStateToProps, mapDispatchToProps)(APPContainer);\r\n\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport actionOperation from './actionOperetion';\r\n\r\nconst addContactMore = (state, action) => {\r\n        return [...state, action.payload];\r\n};\r\nconst deleteOnContact = (state, action) => state.filter(contact => contact.id !== action.payload);\r\nconst changeOnFilter = (_, action) => action.payload;\r\nconst arrayItems = createReducer([], {\r\n    [actionOperation.fetchContactSuccess]: (_, action) => action.payload,\r\n    [actionOperation.addContactSuccess]: addContactMore,\r\n    [actionOperation.removeContactSuccess]: deleteOnContact,\r\n});\r\nconst filter = createReducer('', {\r\n    [actionOperation.changeFilter]: changeOnFilter,\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n    arrayItems,\r\n    filter,\r\n});","import { configureStore } from '@reduxjs/toolkit';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './contacts/reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: reducers,\r\n  },\r\n  middleware: [thunk],\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport APP from './components/appContainer';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(<Provider store={store}><APP/></Provider>, \r\n    document.getElementById('root'),);"],"sourceRoot":""}